1.View 的事件分发源码阅读

当用户点击屏幕时 View会调用DispatchTouchEvent方法

  /**
     * Pass the touch screen motion event down to the target view, or this
     * view if it is the target.
     *
     * @param event The motion event to be dispatched.
     * @return True if the event was handled by the view, false otherwise.
     */
    public boolean dispatchTouchEvent(MotionEvent event) {
        // If the event should be handled by accessibility focus first.
        if (event.isTargetAccessibilityFocus()) {
            // We don't have focus or no virtual descendant has it, do not handle the event.
            if (!isAccessibilityFocusedViewOrHost()) {
                return false;
            }
            // We have focus and got the event, then use normal event dispatch.
            event.setTargetAccessibilityFocus(false);
        }
        
        //标记
        boolean result = false;

        if (mInputEventConsistencyVerifier != null) {
            mInputEventConsistencyVerifier.onTouchEvent(event, 0);
        }

        final int actionMasked = event.getActionMasked();
        if (actionMasked == MotionEvent.ACTION_DOWN) {
            // Defensive cleanup for new gesture
            stopNestedScroll();
        }
        
        if (onFilterTouchEventForSecurity(event)) {
            if ((mViewFlags & ENABLED_MASK) == ENABLED && handleScrollBarDragging(event)) {
                result = true;
            }
            //noinspection SimplifiableIfStatement
            ListenerInfo li = mListenerInfo;
            //如果view调用了 setOnTouchEvent li会被赋值 li != null && li.mOnTouchListener 值会为true 
            //并且 view 的 ENABLED_MASK 状态默认为true 与的结构会为 ENABLED 然后代码会继续执行
            //此时会调用view的onTouch方法 
            //如果 li.mOnTouchListener.onTouch(this, event)返回值为true 那么result自然也就被置为true
            //否则 result 不会被置为true
            if (li != null && li.mOnTouchListener != null
                    && (mViewFlags & ENABLED_MASK) == ENABLED
                    && li.mOnTouchListener.onTouch(this, event)) {
                result = true;
            }
            //这里 如果result 被上面置为了true 那么 onTouchEvent(event) 也就不再执行
            //如果 result 没有被置为 true  result还是为false 此时 !false 结果为true，继续掉用onTouchEvent(event)
            //onTouchEvent(event) 同样也有返回值 下面面的我们不关心 就不继续往下分析了
            if (!result && onTouchEvent(event)) {
                result = true;
            }
        }

        if (!result && mInputEventConsistencyVerifier != null) {
            mInputEventConsistencyVerifier.onUnhandledEvent(event, 0);
        }

        // Clean up after nested scrolls if this is the end of a gesture;
        // also cancel it if we tried an ACTION_DOWN but we didn't want the rest
        // of the gesture.
        if (actionMasked == MotionEvent.ACTION_UP ||
                actionMasked == MotionEvent.ACTION_CANCEL ||
                (actionMasked == MotionEvent.ACTION_DOWN && !result)) {
            stopNestedScroll();
        }

        return result;
    }
    
    //由View的上面的源码分析可知 View 的事件分发机制为如下流程
    
    view控件是否调用了 li.mOnTouchListener.onTouch(this, event) 并切返回值是 true 还是false 
    
    情况1：
        没调用li.mOnTouchListener.onTouch(this, event)方法 
        或者 调用了 li.mOnTouchListener.onTouch(this, event) 返回值为false
        result将不会被置为true状态 

        if (!result && onTouchEvent(event)) {
                    result = true;
        }
    
        此时View 的 onTouchEvent(event) 分发会被执行
    
    情况2:
        没调用或者调用了li.mOnTouchListener.onTouch(this, event)方法  返回值为true
        result
